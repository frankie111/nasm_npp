     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15 00000000 4D69726365612D416C-         myName db 'Mircea-Alexandru Rautoiu', 0   ;0 terminierte Zeichenkette
    15 00000009 6578616E6472752052-
    15 00000012 6175746F697500     
    16                                      ;3 bh, 19 bl
    17                                      
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22                                      
    23 00000000 BB00000000                      mov ebx, 0            ;bh = uppercase counter,bl=lowercase counter
    24 00000005 BE00000000                      mov esi, 0
    25                                          
    26                                      while:
    27 0000000A 8A86[00000000]                  mov al, [myName+esi]
    28 00000010 84C0                            test al, al       ;al & al
    29 00000012 7423                            jz end       ;if al == 0 -> break
    30                                          
    31 00000014 3C5A                            cmp al, 'Z'
    32 00000016 7E07                            jle checkUpperCase     ;if al <= 'Z'
    33                                          
    34 00000018 3C7A                            cmp al, 'z'
    35 0000001A 7E0F                            jle checkLowerCase     ;if al <= 'z'
    36                                          
    37 0000001C 46                              inc esi
    38 0000001D EBEB                            jmp while
    39                                          
    40                                      checkUpperCase:
    41 0000001F 3C41                            cmp al, 'A'
    42 00000021 7D03                            jge isUpperCase    ; 'A'<= al >= 'Z'
    43                                      
    44 00000023 46                              inc esi
    45 00000024 EBE4                            jmp while
    46                                          
    47                                          isUpperCase:
    48 00000026 FEC7                                inc bh             ;bh++
    49 00000028 46                                  inc esi
    50 00000029 EBDF                                jmp while
    51                                      
    52                                      checkLowerCase:
    53 0000002B 3C61                            cmp al, 'a'        ; 'a'<= al <= 'z'
    54 0000002D 7D03                            jge isLowerCase
    55                                          
    56 0000002F 46                              inc esi
    57 00000030 EBD8                            jmp while
    58                                          
    59                                          isLowerCase:
    60 00000032 FEC3                                inc bl             ;bl++
    61 00000034 46                                  inc esi
    62 00000035 EBD3                                jmp while
    63                                      
    64                                          
    65                                      end:
    66                                          ; exit(0)
    67 00000037 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    68 00000039 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
