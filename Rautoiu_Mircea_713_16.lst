     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 0200                        a dw 2
    16 00000002 03                          b db 3
    17 00000003 0100                        c dw 1
    18 00000005 02                          d db 2
    19 00000006 0A000000                    e dd 10
    20 0000000A D007000000000000            x dq 2000
    21                                      
    22                                      ;1000 + 100*5 - 1 + 100 = 1599
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                      
    28                                          ;x/2
    29 00000000 A1[0A000000]                    mov eax, dword[x+0] ;edx:eax = x
    30 00000005 8B15[0E000000]                  mov edx, dword[x+4]
    31 0000000B BB02000000                      mov ebx, 2 ;ebx = 2
    32 00000010 F7F3                            div ebx ;eax = x/2
    33 00000012 50                              push eax
    34                                          
    35                                          ;100*(a+b)
    36 00000013 B800000000                      mov eax, 0
    37 00000018 66A1[00000000]                  mov ax, word[a] ;ax = a
    38 0000001E 66BB0000                        mov bx, 0
    39 00000022 8A1D[02000000]                  mov bl, byte[b] ;bx = b
    40 00000028 6601D8                          add ax, bx ;ax = a+b
    41 0000002B 66B96400                        mov cx, 100
    42 0000002F 66F7E1                          mul cx; dx:ax = 100*(a+b)
    43 00000032 6652                            push dx
    44 00000034 6650                            push ax
    45 00000036 58                              pop eax ;eax = 100*(a+b)
    46                                          
    47 00000037 5B                              pop ebx ;ebx = x/2
    48 00000038 01D8                            add eax, ebx ;eax = x/2 + 100*(a+b)
    49 0000003A 50                              push eax
    50                                          
    51                                          ;3/(c+d)
    52 0000003B BB00000000                      mov ebx, 0
    53 00000040 668B1D[03000000]                mov bx, word[c] ;ax = c
    54 00000047 66B90000                        mov cx, 0
    55 0000004B 8A0D[05000000]                  mov cl, byte[d] ;bx = c
    56 00000051 6601CB                          add bx, cx ;ax = c+d
    57 00000054 B803000000                      mov eax, 3 ;eax = 3
    58 00000059 66F7F3                          div bx ;ax = 3/(c+d)
    59                                          
    60                                          ;x/2 + 100*(a+b) - 3/(c+d)
    61 0000005C 5B                              pop ebx ;ebx = x/2 + 100*(a+b)
    62 0000005D 29C3                            sub ebx, eax ;ebx = x/2 + 100*(a+b) - 3/(c+d)
    63 0000005F 53                              push ebx
    64                                          
    65                                          ;e*e
    66 00000060 A1[06000000]                    mov eax, dword[e] ;eax = e
    67 00000065 8B1D[06000000]                  mov ebx, dword[e] ;ebx = e
    68 0000006B F7E3                            mul ebx ;edx:eax = e*e
    69                                          
    70                                          ;x/2+100*(a+b)-3/(c+d)+e*e
    71 0000006D 5B                              pop ebx ;ebx = x/2+100*(a+b)-3/(c+d)
    72 0000006E F8                              clc
    73 0000006F 01D8                            add eax, ebx ;edx:eax = x/2+100*(a+b)-3/(c+d)+e*e
    74 00000071 83D200                          adc edx, 0
    75                                          
    76                                          
    77                                          ; exit(0)
    78 00000074 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    79 00000076 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
