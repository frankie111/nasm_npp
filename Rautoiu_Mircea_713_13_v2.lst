     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15 00000000 010306020307                s1 db 1, 3, 6, 2, 3, 7
    16 00000006 060308010205                s2 db 6, 3, 8, 1, 2, 5
    17                                      len equ $-s2           ;len = 6 = Länge von s1 und s2
    18 0000000C 00<rept>                    d times len db 0       ;Man reserviert [len] Bytes für d
    19                                      
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          
    26 00000000 B906000000                      mov ecx, len      ;ecx = 6
    27 00000005 BE00000000                      mov esi, 0
    28 0000000A E328                            jecxz end         ;jump to end if ecx == 0
    29                                          
    30                                          for:
    31 0000000C 8A86[00000000]                      mov al, [s1+esi]
    32 00000012 8A9E[06000000]                      mov bl, [s2+esi]
    33 00000018 38D8                                cmp al, bl
    34 0000001A 7302                                jae maxA        ;jump if al >= bl to maxA
    35 0000001C 720B                                jb  maxB        ;jump if al < bl to maxB
    36                                              
    37                                              maxA:
    38 0000001E E314                                    jecxz end
    39 00000020 8886[0C000000]                          mov [d+esi], al   ;add al to d
    40 00000026 46                                      inc esi
    41 00000027 E2E3                                    loop for          ;ecx-- and jump back to for
    42                                              
    43                                              maxB:
    44 00000029 E309                                    jecxz end
    45 0000002B 889E[0C000000]                          mov [d+esi], bl   ;add bl to d
    46 00000031 46                                      inc  esi
    47 00000032 E2D8                                    loop for          ;ecx-- and jump back to for
    48                                              
    49                                          
    50                                          
    51                                      end:
    52                                          ; exit(0)
    53 00000034 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    54 00000036 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
