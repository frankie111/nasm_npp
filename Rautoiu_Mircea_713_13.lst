     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15 00000000 010306020307                s1 db 1, 3, 6, 2, 3, 7
    16 00000006 060308010205                s2 db 6, 3, 8, 1, 2, 5
    17                                      len equ $-s2           ;len = 6 = Länge von s1 und s2
    18 0000000C 00<rept>                    d times len db 0       ;Man reserviert [len] Bytes für d
    19                                      
    20                                      
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; ...
    25                                          
    26 00000000 B906000000                      mov ecx, len     ;ecx = 6
    27 00000005 BE00000000                      mov esi, 0
    28 0000000A E323                            jecxz end        ;jump to end if ecx == 0
    29                                          
    30                                          for:
    31 0000000C 66B80000                            mov ax, 0
    32 00000010 66BB0000                            mov bx, 0
    33 00000014 8A86[00000000]                      mov al, [s1+esi]
    34 0000001A 8A9E[06000000]                      mov bl, [s2+esi]
    35 00000020 38D8                                cmp al, bl
    36 00000022 660F4CC3                            cmovl ax, bx       ;move bl to al if bl > al
    37 00000026 8886[0C000000]                      mov [d+esi], al    ;add al to d
    38                                              
    39 0000002C 46                                  inc esi
    40 0000002D E2DD                            loop for
    41                                          
    42                                      end:
    43                                          ; exit(0)
    44 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
