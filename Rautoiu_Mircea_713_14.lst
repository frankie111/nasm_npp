     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                  
    15                                      ; 14. Berechnen Sie aus den Wörtern A und B das Doppelwort C wie folgt:
    16                                          ; die Bits 0-3 von C sind die gleichen wie die Bits 5-8 von B
    17                                          ; die Bits 4-10 von C sind die Invertierung der Bits 0-6 von B
    18                                          ; die Bits 11-18 von C haben den Wert 1
    19                                          ; die Bits 19-31 von C sind die gleichen wie die Bits 3-15 von B
    20                                          
    21                                      ;a dw 0101001111000011b
    22 00000000 1AB9                        b dw 1011100100011010b
    23 00000002 00000000                    c dd 0
    24                                      
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                      
    31 00000000 BB00000000                      mov ebx, 0 ;Ergebnis in ebx
    32 00000005 B800000000                      mov eax, 0
    33 0000000A 66A1[00000000]                  mov ax, word[b] ;wir isolieren die Bits 5-8 von b
    34 00000010 6625E001                        and ax, 0000000111100000b
    35 00000014 B105                            mov cl, 5
    36 00000016 66D3C8                          ror ax, cl ;wir rotieren 5 Positionen nach rechts
    37 00000019 6609C3                          or bx, ax ;Wir fÜgen die Bits in das Ergebnis ein (bx = 0000000000001000b)
    38                                          
    39 0000001C 66A1[00000000]                  mov ax, word[b] ;wir isolieren die Bits 0-6 von b
    40 00000022 66F7D0                          not ax  ;wir invertieren die Bits 0-6 von b
    41 00000025 6683E07F                        and ax, 0000000001111111b
    42 00000029 B104                            mov cl, 4
    43 0000002B 66D3C0                          rol ax, cl ;Wir rotieren 6 Positionen nach links        
    44 0000002E 6609C3                          or bx, ax ;Wir fügen die Bits in das Ergebnis ein (bx = 0000011001011000b)
    45                                          
    46 00000031 81CB00F80700                    or ebx, 000000000000011_11111100000000000b ;Bits 11-18 von C werden 1
    47                                          ;(ebx = 000000000000011_11111111001011000b)
    48                                          
    49 00000037 B800000000                      mov eax, 0
    50 0000003C 66A1[00000000]                  mov ax, word[b] ;wir isolieren die Bits 3-15 von be
    51 00000042 25F8FF0000                      and eax, 0000000000000000_1111111111111000b
    52 00000047 B10F                            mov cl, 15
    53 00000049 D3C0                            rol eax, cl ;Wir rotieren 3 Positionen nach links
    54 0000004B 09C3                            or ebx, eax ;Wir fügen die Bits in das Ergebnis ein
    55                                          ;(ebx = 010111001000111_11111111001011000b)
    56                                      
    57                                          ; exit(0)
    58 0000004D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    59 0000004F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
