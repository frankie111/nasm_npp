     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15 00000000 1C2BA60200000000            x dq 44444444
    16 00000008 <res 00000004>              rezx resd 1
    17                                      
    18 0000000C DE00                        a dw 222
    19 0000000E 6F                          b db 111
    20                                      
    21 0000000F <res 00000004>              rez100 resd 1
    22                                      
    23 00000013 D202                        c dw 722
    24 00000015 A6                          d db 166
    25                                      
    26 00000016 <res 00000004>              rez3 resd 1
    27                                      
    28 0000001A 05000000                    e dd 5
    29 0000001E <res 00000008>              reze2 resq 1
    30                                      
    31                                  ; our code starts here
    32                                  segment code use32 class=code
    33                                      start:
    34                                      
    35                                          ;rezx = x/2
    36 00000000 BB02000000                      mov ebx, 2
    37 00000005 A1[00000000]                    mov eax, dword [x+0]
    38 0000000A 8B15[04000000]                  mov edx, dword [x+4]
    39 00000010 F7F3                            div ebx
    40 00000012 A3[08000000]                    mov dword[rezx], eax
    41                                          
    42                                          ;a += b
    43 00000017 66A1[0C000000]                  mov ax, [a] ;ax = a
    44 0000001D 8A1D[0E000000]                  mov bl, [b] ;bx = b
    45 00000023 B700                            mov bh, 0
    46 00000025 6601D8                          add ax, bx
    47 00000028 66A3[0C000000]                  mov word[a], ax
    48                                          
    49                                          ;rez100 = a*100
    50 0000002E B800000000                      mov eax, 0
    51 00000033 66A1[0C000000]                  mov ax, [a]
    52 00000039 BB64000000                      mov ebx, 100
    53 0000003E F7E3                            mul ebx
    54 00000040 A3[0F000000]                    mov dword[rez100], eax 
    55                                          
    56                                          ;c += d
    57 00000045 66A1[13000000]                  mov ax, [c] ;ax = c
    58 0000004B 8A1D[15000000]                  mov bl, [d] ;bx = b
    59 00000051 B700                            mov bh, 0
    60 00000053 6601D8                          add ax, bx
    61 00000056 66A3[13000000]                  mov word[c], ax
    62                                          
    63                                          ;rez3 = 3/c
    64 0000005C 66B80300                        mov ax, 3
    65 00000060 66BB0000                        mov bx, 0 ;?
    66 00000064 668B1D[13000000]                mov bx, [c]
    67 0000006B 66F7F3                          div bx
    68 0000006E 66A3[16000000]                  mov word[rez3], ax
    69                                        
    70                                          ;reze2 = e*e
    71 00000074 A1[1A000000]                    mov eax, [e]
    72 00000079 8B1D[1A000000]                  mov ebx, [e]
    73 0000007F F7E3                            mul ebx
    74 00000081 A3[1E000000]                    mov dword[reze2+0], eax
    75 00000086 8915[22000000]                  mov dword[reze2+4], edx
    76                                          
    77                                          ;rezx + rez100 - rez3 + reze2
    78 0000008C A1[08000000]                    mov eax, dword[rezx]
    79 00000091 8B1D[0F000000]                  mov ebx, dword[rez100]
    80 00000097 01D8                            add eax, ebx
    81 00000099 8B1D[16000000]                  mov ebx, dword[rez3]
    82 0000009F 29D8                            sub eax, ebx
    83                                          
    84 000000A1 0305[1E000000]                  add eax, dword[reze2+0]
    85 000000A7 8B15[22000000]                  mov edx, dword[reze2+4]
    86                                          
    87                                          ;rezFin = EDX:EAX
    88                                          
    89                                          
    90                                          ; exit(0)
    91 000000AD 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    92 000000AF FF15[00000000]                  call    [exit]       ; call exit to terminate the program
