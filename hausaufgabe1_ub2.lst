     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15                                      ;imul
    16                                      ;idiv
    17                                      ;conversions: cbw, cwd, cwde
    18                                      ;cdq: (keine Operanden) EAX -> EDX:EAX
    19                                      
    20 00000000 F6FF                        a dw -10
    21 00000002 F6                          b db -10
    22 00000003 FFFF0F00                    c dd 0x000FFFFF
    23 00000007 D4FEFFFFFFFFFFFF            x dq -300
    24                                      
    25 0000000F <res 00000004>              rezDiv resd 1
    26                                      
    27                                      
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31                                      
    32 00000000 66A1[00000000]                  mov ax, word[a] ;ax = a
    33 00000006 668B1D[02000000]                mov bx, word[b] ;bx = a
    34 0000000D 66F7EB                          imul bx ;dx:ax = a*a
    35 00000010 6652                            push dx
    36 00000012 6650                            push ax
    37 00000014 59                              pop ecx ;ecx = a*a
    38                                          
    39 00000015 A0[02000000]                    mov al, byte[b] ;al = b
    40 0000001A 6698                            cbw ; al -> ax
    41 0000001C 6699                            cwd ; ax -> dx:ax
    42 0000001E 6652                            push dx
    43 00000020 6650                            push ax
    44 00000022 58                              pop eax ;eax = b
    45 00000023 01C8                            add eax, ecx ;eax = a*a + b
    46                                          
    47 00000025 99                              cdq ;eax -> edx:eax
    48 00000026 0305[07000000]                  add eax, dword[x+0]  
    49 0000002C 0315[0B000000]                  add edx, dword[x+4]
    50                                          ;edx:eax = a*a + b + x
    51 00000032 52                              push edx
    52 00000033 50                              push eax
    53                                          
    54 00000034 8A0D[02000000]                  mov cl, byte[b] ;cl = b
    55 0000003A 8A1D[02000000]                  mov bl, byte[b] ;bl = b
    56 00000040 00D9                            add cl, bl ;cl = b + b
    57                                          
    58                                          ;edx:eax / cl
    59 00000042 88C8                            mov al, cl
    60 00000044 6698                            cbw ;al -> ax
    61 00000046 6699                            cwd ;ax -> dx:ax
    62 00000048 6652                            push dx
    63 0000004A 6650                            push ax
    64 0000004C 58                              pop eax ;eax = dx:ax
    65 0000004D 89C3                            mov ebx, eax
    66 0000004F 58                              pop eax
    67 00000050 5A                              pop edx
    68 00000051 F7FB                            idiv ebx ;edx:eax /= ebx
    69 00000053 50                              push eax
    70                                          
    71 00000054 A1[03000000]                    mov eax, dword[c] ;eax = c
    72 00000059 8B0D[03000000]                  mov ecx, dword[c] ;ecx = c
    73 0000005F F7E9                            imul ecx ;edx:eax = c*c
    74                                          
    75 00000061 89D1                            mov ecx, edx ;ecx = edx
    76 00000063 89C3                            mov ebx, eax ;ebx = eax
    77 00000065 58                              pop eax
    78 00000066 F8                              clc ;CF = 0 
    79 00000067 01D8                            add eax, ebx ;eax += ebx
    80 00000069 83D200                          adc edx, 0 ;edx += cf
    81                                  
    82                                          ;edx:eax = (a*a+b+x)/(b+b)+c*c
    83                                          
    84                                          ; exit(0)
    85 0000006C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    86 0000006E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
