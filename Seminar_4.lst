     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15                                      ;Person:
    16                                      ;.Name dq 'Rautoiu'
    17                                      ;.Vorname dq 'Mircea'
    18                                      ;.Tag dw 1
    19                                      ;.Monat db 10
    20                                      ;.jahr dw 2003
    21                                      ;.CNP dq 5080375354848
    22                                      
    23 00000000 0400                        eingabe dw 4
    24 00000002 0000                        ausgabe dw 0
    25                                      
    26                                      
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 B800000000                      mov eax, 0
    32 00000005 BB00000000                      mov ebx, 0
    33 0000000A 66A1[00000000]                  mov ax, word[eingabe]
    34 00000010 668B1D[02000000]                mov bx, word[ausgabe]
    35                                          
    36                                          while:
    37 00000017 3C00                            cmp al, 0
    38 00000019 7208                            jb endwhile        ;Jump if less
    39                                          
    40 0000001B B102                            mov cl, 2
    41 0000001D F6F1                            div cl ;al = ax / 2
    42 0000001F 00C3                            add bl, al ;bl += al
    43                                          
    44                                          
    45 00000021 EBF4                            jmp while
    46                                          endwhile:
    47                                          
    48                                      
    49                                          ; exit(0)
    50 00000023 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 00000025 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
