     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14                                      
    15                                      ;2.Berechnen Sie aus den Wörtern A und B das Doppelwort C wie folgt:
    16                                          ;die Bits 0-2 von C sind die gleichen wie die Bits 12-14 von A
    17                                          ;die Bits 3-8 von C sind die gleichen wie die Bits 0-5 von B
    18                                          ;die Bits 9-15 von C sind die gleichen wie die Bits 3-9 von A
    19                                          ;die Bits 16-31 von C sind die gleichen wie die Bits von A
    20                                  
    21 00000000 C353                        a dw 0101001111000011b
    22 00000002 1AB9                        b dw 1011100100011010b
    23 00000004 00000000                    c dd 0
    24                                      ;0101001111000011_1111000011010101 = 61,644
    25                                  ; our code starts here
    26                                  segment code use32 class=code
    27                                      start:
    28                                          ; ...
    29                                      
    30 00000000 BB00000000                      mov ebx, 0 ;Ergebnis in ebx
    31                                          
    32 00000005 B800000000                      mov eax, 0
    33 0000000A 66A1[00000000]                  mov ax, word[a] ;wir isolieren die Bits 12-14 von a
    34 00000010 66250070                        and ax, 0111000000000000b
    35 00000014 B104                            mov cl, 4
    36 00000016 66D3C0                          rol ax, cl ;wir rotieren 4 Positionen nach links
    37 00000019 6609C3                          or bx, ax ;wir fügen die Bits in das Ergebnis ein
    38                                          
    39 0000001C 66A1[02000000]                  mov ax, word[b] ;wir isolieren die Bits 0-5 von b
    40 00000022 6683E03F                        and ax, 0000000000111111b
    41 00000026 B103                            mov cl, 3
    42 00000028 66D3C0                          rol ax, cl ;wir rotieren 3 Positionen nach links
    43 0000002B 6609C3                          or bx, ax ;wir fügen die Bits in das Ergebnis ein
    44                                          
    45 0000002E 66A1[00000000]                  mov ax, word[a] ;wir isolieren die Bits 3-9 von a
    46 00000034 6625F803                        and ax, 0000001111111000b
    47 00000038 B106                            mov cl, 6
    48 0000003A 66D3C0                          rol ax, cl ;wir rotieren 6 Positionen nach links
    49 0000003D 6609C3                          or bx, ax ;Wir fügen die Bits in das Ergebnis ein
    50                                          
    51 00000040 668B15[00000000]                mov dx, word[a] ;wir nehmen alle Bits von a
    52 00000047 6652                            push dx
    53 00000049 6653                            push bx
    54 0000004B 5B                              pop ebx 
    55                                          
    56                                          
    57                                          
    58                                          ; exit(0)
    59 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    60 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
